# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.project_pb2 as project__pb2


class projectStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list = channel.unary_unary(
                '/project/list',
                request_serializer=project__pb2.ListProjectDto.SerializeToString,
                response_deserializer=project__pb2.ListProjectResponseDto.FromString,
                )
        self.insert = channel.unary_unary(
                '/project/insert',
                request_serializer=project__pb2.ProjectDto.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.updateAvatar = channel.unary_unary(
                '/project/updateAvatar',
                request_serializer=project__pb2.ProjectAvatarDto.SerializeToString,
                response_deserializer=project__pb2.ProjectAvatarResponseDto.FromString,
                )
        self.update = channel.unary_unary(
                '/project/update',
                request_serializer=project__pb2.ProjectDto.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.query = channel.unary_unary(
                '/project/query',
                request_serializer=project__pb2.Query.SerializeToString,
                response_deserializer=project__pb2.QueryProjectResponseDto.FromString,
                )
        self.delete = channel.unary_unary(
                '/project/delete',
                request_serializer=project__pb2.Query.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.insertRole = channel.unary_unary(
                '/project/insertRole',
                request_serializer=project__pb2.ProjectRoleDto.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.updateRole = channel.unary_unary(
                '/project/updateRole',
                request_serializer=project__pb2.ProjectRoleDto.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.deleteRole = channel.unary_unary(
                '/project/deleteRole',
                request_serializer=project__pb2.Query.SerializeToString,
                response_deserializer=project__pb2.ProjectResponse.FromString,
                )
        self.checkPermission = channel.unary_unary(
                '/project/checkPermission',
                request_serializer=project__pb2.PermissionDto.SerializeToString,
                response_deserializer=project__pb2.PermissionResponseDto.FromString,
                )
        self.queryUserProjectAmount = channel.unary_unary(
                '/project/queryUserProjectAmount',
                request_serializer=project__pb2.ProjectRequest.SerializeToString,
                response_deserializer=project__pb2.QueryUserProjectAmountResponse.FromString,
                )


class projectServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list(self, request, context):
        """获取项目列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert(self, request, context):
        """创建项目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAvatar(self, request, context):
        """更新项目头像
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """更新项目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """查询项目信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """删除项目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertRole(self, request, context):
        """插入角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateRole(self, request, context):
        """编辑角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteRole(self, request, context):
        """删除角色
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkPermission(self, request, context):
        """查询用户是否有权限
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryUserProjectAmount(self, request, context):
        """查询用户已有的项目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_projectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=project__pb2.ListProjectDto.FromString,
                    response_serializer=project__pb2.ListProjectResponseDto.SerializeToString,
            ),
            'insert': grpc.unary_unary_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=project__pb2.ProjectDto.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'updateAvatar': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAvatar,
                    request_deserializer=project__pb2.ProjectAvatarDto.FromString,
                    response_serializer=project__pb2.ProjectAvatarResponseDto.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=project__pb2.ProjectDto.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=project__pb2.Query.FromString,
                    response_serializer=project__pb2.QueryProjectResponseDto.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=project__pb2.Query.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'insertRole': grpc.unary_unary_rpc_method_handler(
                    servicer.insertRole,
                    request_deserializer=project__pb2.ProjectRoleDto.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'updateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.updateRole,
                    request_deserializer=project__pb2.ProjectRoleDto.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'deleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteRole,
                    request_deserializer=project__pb2.Query.FromString,
                    response_serializer=project__pb2.ProjectResponse.SerializeToString,
            ),
            'checkPermission': grpc.unary_unary_rpc_method_handler(
                    servicer.checkPermission,
                    request_deserializer=project__pb2.PermissionDto.FromString,
                    response_serializer=project__pb2.PermissionResponseDto.SerializeToString,
            ),
            'queryUserProjectAmount': grpc.unary_unary_rpc_method_handler(
                    servicer.queryUserProjectAmount,
                    request_deserializer=project__pb2.ProjectRequest.FromString,
                    response_serializer=project__pb2.QueryUserProjectAmountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'project', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class project(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/list',
            project__pb2.ListProjectDto.SerializeToString,
            project__pb2.ListProjectResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/insert',
            project__pb2.ProjectDto.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateAvatar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/updateAvatar',
            project__pb2.ProjectAvatarDto.SerializeToString,
            project__pb2.ProjectAvatarResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/update',
            project__pb2.ProjectDto.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/query',
            project__pb2.Query.SerializeToString,
            project__pb2.QueryProjectResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/delete',
            project__pb2.Query.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/insertRole',
            project__pb2.ProjectRoleDto.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/updateRole',
            project__pb2.ProjectRoleDto.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/deleteRole',
            project__pb2.Query.SerializeToString,
            project__pb2.ProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkPermission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/checkPermission',
            project__pb2.PermissionDto.SerializeToString,
            project__pb2.PermissionResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryUserProjectAmount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/project/queryUserProjectAmount',
            project__pb2.ProjectRequest.SerializeToString,
            project__pb2.QueryUserProjectAmountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
