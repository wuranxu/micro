# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.user_pb2 as user__pb2


class userStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/user/register',
                request_serializer=user__pb2.UserDto.SerializeToString,
                response_deserializer=user__pb2.Response.FromString,
                )
        self.login = channel.unary_unary(
                '/user/login',
                request_serializer=user__pb2.LoginDto.SerializeToString,
                response_deserializer=user__pb2.LoginResponseDto.FromString,
                )
        self.listUser = channel.unary_unary(
                '/user/listUser',
                request_serializer=user__pb2.Request.SerializeToString,
                response_deserializer=user__pb2.ListUserResponseDto.FromString,
                )
        self.loginWithGithub = channel.unary_unary(
                '/user/loginWithGithub',
                request_serializer=user__pb2.LoginWithGithubDto.SerializeToString,
                response_deserializer=user__pb2.LoginResponseDto.FromString,
                )
        self.update = channel.unary_unary(
                '/user/update',
                request_serializer=user__pb2.UpdateUserDto.SerializeToString,
                response_deserializer=user__pb2.LoginResponseDto.FromString,
                )
        self.delete = channel.unary_unary(
                '/user/delete',
                request_serializer=user__pb2.CommonDeleteDto.SerializeToString,
                response_deserializer=user__pb2.Response.FromString,
                )
        self.resetPassword = channel.unary_unary(
                '/user/resetPassword',
                request_serializer=user__pb2.ResetDto.SerializeToString,
                response_deserializer=user__pb2.Response.FromString,
                )
        self.generatePassword = channel.unary_unary(
                '/user/generatePassword',
                request_serializer=user__pb2.GeneratePasswordDto.SerializeToString,
                response_deserializer=user__pb2.Response.FromString,
                )
        self.checkToken = channel.unary_unary(
                '/user/checkToken',
                request_serializer=user__pb2.CheckResetUrlDto.SerializeToString,
                response_deserializer=user__pb2.CheckResetUrlResponseDto.FromString,
                )


class userServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """注册用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """用户登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listUser(self, request, context):
        """获取用户列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loginWithGithub(self, request, context):
        """通过github登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """更新用户信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """// 根据token查询用户
        rpc query(Request) returns (Response) {}
        禁用用户
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetPassword(self, request, context):
        """重置用户密码
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def generatePassword(self, request, context):
        """生成重置密码链接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkToken(self, request, context):
        """校验生成的重置密码链接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_userServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=user__pb2.UserDto.FromString,
                    response_serializer=user__pb2.Response.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=user__pb2.LoginDto.FromString,
                    response_serializer=user__pb2.LoginResponseDto.SerializeToString,
            ),
            'listUser': grpc.unary_unary_rpc_method_handler(
                    servicer.listUser,
                    request_deserializer=user__pb2.Request.FromString,
                    response_serializer=user__pb2.ListUserResponseDto.SerializeToString,
            ),
            'loginWithGithub': grpc.unary_unary_rpc_method_handler(
                    servicer.loginWithGithub,
                    request_deserializer=user__pb2.LoginWithGithubDto.FromString,
                    response_serializer=user__pb2.LoginResponseDto.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=user__pb2.UpdateUserDto.FromString,
                    response_serializer=user__pb2.LoginResponseDto.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=user__pb2.CommonDeleteDto.FromString,
                    response_serializer=user__pb2.Response.SerializeToString,
            ),
            'resetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.resetPassword,
                    request_deserializer=user__pb2.ResetDto.FromString,
                    response_serializer=user__pb2.Response.SerializeToString,
            ),
            'generatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.generatePassword,
                    request_deserializer=user__pb2.GeneratePasswordDto.FromString,
                    response_serializer=user__pb2.Response.SerializeToString,
            ),
            'checkToken': grpc.unary_unary_rpc_method_handler(
                    servicer.checkToken,
                    request_deserializer=user__pb2.CheckResetUrlDto.FromString,
                    response_serializer=user__pb2.CheckResetUrlResponseDto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class user(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/register',
            user__pb2.UserDto.SerializeToString,
            user__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/login',
            user__pb2.LoginDto.SerializeToString,
            user__pb2.LoginResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/listUser',
            user__pb2.Request.SerializeToString,
            user__pb2.ListUserResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def loginWithGithub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/loginWithGithub',
            user__pb2.LoginWithGithubDto.SerializeToString,
            user__pb2.LoginResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/update',
            user__pb2.UpdateUserDto.SerializeToString,
            user__pb2.LoginResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/delete',
            user__pb2.CommonDeleteDto.SerializeToString,
            user__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/resetPassword',
            user__pb2.ResetDto.SerializeToString,
            user__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def generatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/generatePassword',
            user__pb2.GeneratePasswordDto.SerializeToString,
            user__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user/checkToken',
            user__pb2.CheckResetUrlDto.SerializeToString,
            user__pb2.CheckResetUrlResponseDto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
